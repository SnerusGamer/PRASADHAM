def fib(n):
    if n<=1:
        return n
    return fib(n-1)+fib(n-2)
n = int(input())
for i in range(n):
    print(fib(i))

string = input()
mydict= {} 
for i in string:
    mydict[i] = string.count(i)
print(mydict)

birthday = input()
birth = birthday.split(" ")
temp = '-'.join(birth)
mydict = {"birthday":temp}
print(mydict)

file1 = input()
file2 = input()
fn1 = open(file1,'r')
fn2 = open(file2,'w')
cont = fn1.readlines()
for i in range(0,len(cont)):
    fn2.write(cont[i])
fn2.close()
fn2 = open(file2,'r')
cont1 = fn2.read()
print(cont1)
fn1.close()
fn2.close()

file1 = input()
fn = open(file1,'r')
lst = list()
words = []
for i in fn:
    words += i.split()
words.sort()
for i in words:
    if i in lst:
        continue
    else:
        lst.append(i)
        print(i)
print(lst)

import pandas as pd
import matplotlib.pyplot as plt
path1='D:/arun/2023-2024/II-I CSBS-CS/course file-CS/datasets/iris.csv'
iris=pd.read_csv(path1)
iris
iris.head()
iris.columns
iris['SepalLengthCm']
iris['Species'].value_counts()
iris.plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm')
plt.show()
iris.plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='green',s=50)
plt.show()
plt.plot(iris['SepalLengthCm'])
plt.hist(iris['SepalWidthCm'])
plt.bar(iris['SepalWidthCm'],iris['PetalLengthCm'])
winedata=wine.dropna()
wine=wine.dropna()
wine=wine.reset_index(drop=True)

import matplotlib.pyplot as plt
x = [1,2,3,4,5]
y = [5,8,4,7,5]
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x,y)
ax.set_title("Day vs No of questions",fontsize = 15)
ax.set_xlabel("Day",fontsize = 12)
ax.set_ylabel("No of questions",fontsize = 12)
ax.axis([0,10,0,15])
ax.text(1,13,"Answers on quora",style='italic',bbox = {'facecolor':'green','alpha':0.5,'pad':10})
ax.text(8,13,"July",style='italic')
plt.show()

import matplotlib.pyplot as plt
x = [1,2,3,4,5]
y = [5,8,4,7,5]
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x,y)
ax.set_title("Day vs No of questions",fontsize = 15)
ax.set_xlabel("Day",fontsize = 12)
ax.set_ylabel("No of questions",fontsize = 12)
ax.axis([0,10,0,15])
ax.text(1,13,"Answers on quora",style='italic',bbox = {'facecolor':'green','alpha':0.5,'pad':10})
ax.text(8,13,"July",style='italic')
ax.annotate("Peak",xy=(2,8),xytext=(3,10),fontsize=12,arrowprops=dict(facecolor='cyan',shrink=0.05))
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
X = np.arange(16).reshape(4, 4)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(X, cmap = 'gray')
ax.add_patch( Rectangle((0.5, 0.5),2, 2,fc ='none',ec ='g',lw = 10))
plt.show()

import matplotlib
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
fig = plt.figure()
ax = fig.add_subplot(111)
rect1 = Rectangle((-200, -100), 400, 200, color ='green')
rect2 = Rectangle((0, 150), 300, 20, color ='pink')
rect3 = Rectangle((-300, -50), 40, 200, color ='yellow')
ax.add_patch(rect1)
ax.add_patch(rect2)
ax.add_patch(rect3)
plt.xlim([-400, 400])
plt.ylim([-400, 400])
plt.show()

import matplotlib.pyplot as plt
figure, axes = plt.subplots()
Drawing_colored_circle = plt.Circle(( 0.6 , 0.6 ), 0.2 )
axes.set_aspect( 1 )
axes.add_artist( Drawing_colored_circle )
plt.title( 'Colored Circle' )
plt.show()

import numpy as np
from matplotlib.patches import Circle
from matplotlib.collections import PatchCollection
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib import animation
fig, ax = plt.subplots()
patches = []
N = 12 
x = np.random.rand(N)
y = np.random.rand(N)
radii = 0.1 * np.random.rand(N)
for x1, y1, r in zip(x, y, radii):
 circle = Circle((x1, y1), r)
 patches.append(circle)
p = PatchCollection(patches, cmap = cm.prism, alpha = 0.4)
ax.add_collection(p)
def animate(i):
 colors = 100 * np.random.rand(len(patches))
 p.set_array(np.array(colors))
 return p,
ani = animation.FuncAnimation(fig, animate, frames = 50, interval = 50)
plt.show()

import numpy as np
import matplotlib
from matplotlib.patches import Circle, Wedge, Polygon, Ellipse
from matplotlib.collections import PatchCollection
import matplotlib.pyplot as plt
import matplotlib.patches as matpatches
fig, ax = plt.subplots(figsize =(8, 8))
patches = []
circle = Circle((2, 2), 2)
patches.append(circle)
polygon = matpatches.PathPatch(patches[0].get_path())
patches.append(polygon)
colors = 2 * np.random.rand(len(patches))
p = PatchCollection(patches,cmap = matplotlib.cm.jet,alpha = 0.4)
p.set_array(np.array(colors))
ax.add_collection(p)
plt.axis([-10, 10, -10, 10])
plt.show()
contain2 = patches[0].get_path().contains_points([[0.5, 0.5],[1.0, 1.0]])
contain3 = patches[0].contains_point([0.5, 0.5])
contain4 = patches[0].contains_point([1.0, 1.0])

import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0, 1.0, 0.01)
y1 = np.sin(2*np.pi*x)
y2 = np.sin(4*np.pi*x)
lines = plt.plot(x, y1, x, y2)
l1, l2 = lines
plt.setp(lines, linestyle='--')       # set both to dashed
plt.setp(l1, linewidth=2, color='r')  # line1 is thick and red
plt.setp(l2, linewidth=1, color='g')  # line2 is thinner and green
print('Line setters 1')
plt.setp(l1)
print('Line getters 1')
plt.getp(l1)
print('Line setters 2')
plt.setp(l2)
print('Line getters 2')
plt.getp(l2)
print('Rectangle setters')
plt.setp(plt.gca().patch)
print('Rectangle getters')
plt.getp(plt.gca().patch)
t = plt.title('Hi mom')
print('Text setters')
plt.setp(t)
print('Text getters')
plt.getp(t)
plt.show()

import matplotlib 
import numpy as np 
import matplotlib.cm as cm 
import matplotlib.pyplot as plt 
delta = 0.25
x = np.arange(-3.0, 5.0, delta)
y = np.arange(-1.3, 2.5, delta)
X, Y = np.meshgrid(x, y)
Z = (np.exp(-X**2 - Y**2) - np.exp(-(X - 1)**2 - (Y - 1)**2))
im = plt.imshow(Z, interpolation='hermite', 
                origin='lower', 
                cmap="bone", 
                extent=(-3, 3, -2, 2))
levels = np.arange(-1.2, 1.6, 0.2)
CS = plt.contour(Z, levels,
                 origin='lower', 
                 cmap='YlOrBr', 
                 linewidths=2, 
                 extent=(-3, 3, -2, 2)) 
zc = CS.collections[6]
print("collections getp")
plt.getp(zc)
print("collections setp")
plt.setp(zc)
plt.setp(zc, linewidth=2)
plt.clabel(CS, levels, 
           inline=1, #If True the underlying contour is removed where the label is placed
           fmt='%1.1f', #A format string for the label. Default is '%1.3f'
           fontsize=14) #Size in points or relative size 
plt.title('matplotlib.pyplot.setp() Example')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
data = pd.read_csv('D:/arun/2022-23/griet/III-II/ML-python_files/Salary_Data.csv')
data.head()
sns.scatterplot(x="YearsExperience", y="Salary", data=data)
plt.plot()
data.info()
data.describe()
x = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values 
from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 1/3, random_state = 0)
from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(x_train, y_train)
y_pred = regressor.predict(x_test)  
x_pred = regressor.predict(x_train) 
plt.scatter(x_train, y_train, color = "orange")   
plt.plot(x_train, x_pred, color = "black")    
plt.title("Salary vs Experience (Training Dataset)")  
plt.xlabel("Years of Experience")  
plt.ylabel("Salary(In Rupees)")  
plt.show()   
plt.scatter(x_test, y_test, color = "red")   
plt.plot(x_train, x_pred, color = "black")    
plt.title("Salary vs Experience (Test Dataset)")  
plt.xlabel("Years of Experience")  
plt.ylabel("Salary(In Rupees)")  
plt.show()
from sklearn.metrics import r2_score,mean_squared_error
mse = mean_squared_error(y_pred,y_test)
r_sq = r2_score(y_pred,y_test)
print('Mean Squared Error :',mse)
print('R square :',r_sq)
print('Intercept of the model:',regressor.intercept_)
print('Coefficient of the line:',regressor.coef_)
data = pd.read_csv('D:/arun/2022-23/griet/III-II/ML-python_files/data.csv')
data
X = data[['Weight', 'Volume']]
y = data['CO2']
y
from sklearn import linear_model
from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)
from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(x_train, y_train)
y_pred = regressor.predict(x_test)  
x_pred = regressor.predict(x_train) 
mse = mean_squared_error(y_pred,y_test)
r_sq = r2_score(y_pred,y_test)
print('Mean Squared Error :',mse)
print('R square :',r_sq)
print('Intercept of the model:',regressor.intercept_)
print('Coefficient of the line:',regressor.coef_)
predictedCO2 = regr.predict([[2300, 1300]])
predictedCO2


from pydoc import help # can type in the python console `help(name of function)` to get the documentation
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import scale
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from scipy import stats
from IPython.display import display, HTML
# figures inline in notebook
%matplotlib inline
np.set_printoptions(suppress=True)
pd.set_option('display.max_rows', 20)
data=pd.read_csv("/kaggle/input/wineuci/Wine.csv")
data.columns = ["V"+str(i) for i in range(1, len(data.columns)+1)]
X = data.loc[:, "V2":] # independent variables data
y = data.V1 # dependednt variable data
data
data.head()
data.tail()
data.info()
#Plotting Multivariate Data
#Matrix Scatterplot
pd.plotting.scatter_matrix(data.loc[:, "V2":"V14"], diagonal="kde",figsize=(20,15))
plt.show()
#Scatterplot with the Data Points Labelled by their Group
for i in range(2,14):
    sns.lmplot("V"+str(i), "V"+str(i+1), data, hue="V1", fit_reg=False);
ax = data[["V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14"]].plot(figsize=(20,15))
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5));
ax = data[["V2","V3","V4","V5","V6"]].plot(figsize=(20,15))
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5));
X.apply(np.mean)

X.apply(np.std)

X.apply(np.max)

X.apply(np.min)
Part IX
#Means and Variances Per Group

def printMeanAndSdByGroup(variables, groupvariable):
    data_groupby = variables.groupby(groupvariable)
    print("## Means:")
    display(data_groupby.apply(np.mean))
    print("\n## Standard deviations:")
    display(data_groupby.apply(np.std))
    print("\n## Sample sizes:")
    display(pd.DataFrame(data_groupby.apply(len)))

printMeanAndSdByGroup(X, y)

Part X
#Between-groups Variance and Within-groups Variance for a Variable

def calcWithinGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the standard deviation for group i:
        sdi = np.std(levelidata)
        numi = (levelilength)*sdi**2
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the within-groups variance
    Vw = numtotal / (denomtotal - numlevels)
    return Vw

calcWithinGroupsVariance(X.V2, y)

Part XI
def calcBetweenGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set((groupvariable)))
    numlevels = len(levels)
    # calculate the overall grand mean:
    grandmean = np.mean(variable)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the mean and standard deviation for group i:
        meani = np.mean(levelidata)
        sdi = np.std(levelidata)
        numi = levelilength * ((meani - grandmean)**2)
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the between-groups variance
    Vb = numtotal / (numlevels - 1)
    return(Vb)

calcBetweenGroupsVariance(X.V2, y)

Part XII
def calcSeparations(variables, groupvariable):
    # calculate the separation for each variable
    for variablename in variables:
        variablei = variables[variablename]
        Vw = calcWithinGroupsVariance(variablei, groupvariable)
        Vb = calcBetweenGroupsVariance(variablei, groupvariable)
        sep = Vb/Vw
        print("variable", variablename, "Vw=", Vw, "Vb=", Vb, "separation=", sep)

calcSeparations(X, y)

Part XIII
#Between-groups Covariance and Within-groups Covariance for Two Variables

def calcWithinGroupsCovariance(variable1, variable2, groupvariable):
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    Covw = 0.0
    # get the covariance of variable 1 and variable 2 for each group:
    for leveli in levels:
        levelidata1 = variable1[groupvariable==leveli]
        levelidata2 = variable2[groupvariable==leveli]
        mean1 = np.mean(levelidata1)
        mean2 = np.mean(levelidata2)
        levelilength = len(levelidata1)
        # get the covariance for this group:
        term1 = 0.0
        for levelidata1j, levelidata2j in zip(levelidata1, levelidata2):
            term1 += (levelidata1j - mean1)*(levelidata2j - mean2)
        Cov_groupi = term1 # covariance for this group
        Covw += Cov_groupi
    totallength = len(variable1)
    Covw /= totallength - numlevels
    return Covw

calcWithinGroupsCovariance(X.V8, X.V11, y)

Part XIV
def calcBetweenGroupsCovariance(variable1, variable2, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    # calculate the grand means
    variable1mean = np.mean(variable1)
    variable2mean = np.mean(variable2)
    # calculate the between-groups covariance
    Covb = 0.0
    for leveli in levels:
        levelidata1 = variable1[groupvariable==leveli]
        levelidata2 = variable2[groupvariable==leveli]
        mean1 = np.mean(levelidata1)
        mean2 = np.mean(levelidata2)
        levelilength = len(levelidata1)
        term1 = (mean1 - variable1mean) * (mean2 - variable2mean) * levelilength
        Covb += term1
    Covb /= numlevels - 1
    return Covb

calcBetweenGroupsCovariance(X.V8, X.V11, y)

# necessary import
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

Part II
# read dataset from URL
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
cls = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'Class']
dataset = pd.read_csv(url, names=cls)

# divide the dataset into class and target variable
X = dataset.iloc[:, 0:4].values
y = dataset.iloc[:, 4].values

Part III
# Preprocess the dataset and divide into train and test
sc = StandardScaler()
X = sc.fit_transform(X)
le = LabelEncoder()
y = le.fit_transform(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Part IV:
# apply Linear Discriminant Analysis
lda = LinearDiscriminantAnalysis(n_components=2)
X_train = lda.fit_transform(X_train, y_train)
X_test = lda.transform(X_test)

Part V
# plot the scatterplot
plt.scatter(
	X_train[:,0],X_train[:,1],c=y_train,cmap='rainbow',
alpha=0.7,edgecolors='b'
)

# classify using random forest classifier
classifier = RandomForestClassifier(max_depth=2, random_state=0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

# print the accuracy and confusion matrix
print('Accuracy : ' + str(accuracy_score(y_test, y_pred)))
conf_m = confusion_matrix(y_test, y_pred)
print(conf_m)

import numpy as np
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
from sklearn.cluster import KMeans
path="C:/Users/HP/Downloads/CountryClusters.csv"
data = pd.read_csv(path)
data
x = data.iloc[:,1:3] # 1t for rows and second for columns
x
kmeans = KMeans(2)
kmeans.fit(x)
identified_clusters = kmeans.fit_predict(x)
identified_clusters
data_with_clusters = data.copy()
data_with_clusters['Clusters'] = identified_clusters 
plt.scatter(data_with_clusters['Longitude'],data_with_clusters['Latitude'],c=data_with_clusters['Clusters'],cmap='rainbow')
